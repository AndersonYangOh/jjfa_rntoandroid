apply plugin: "com.android.application"

import com.android.build.OutputFile


project.ext.react = [
    entryFile: "index.js"
]

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "自定义"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 12
        versionName "1.8.1"
        renderscriptTargetApi 23
        renderscriptSupportModeEnabled true
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    signingConfigs {
        debug {
        }
    }

    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
        debug {
                // 是否进行混淆
                minifyEnabled false
                proguardFiles 'proguard-rules.pro'
        }

    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->

        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    implementation project(':react-native-orientation')
    implementation project(':react-native-video')
    implementation project(':react-native-code-push')
    implementation project(':rn-fetch-blob')
    implementation project(':react-native-vector-icons')
    implementation project(':react-native-svg')
    implementation project(':react-native-linear-gradient')
    implementation project(':react-native-gesture-handler')
    implementation project(':react-native-fs')
    implementation project(':react-native-doc-viewer')
    implementation project(':@react-native-community_blur')
    implementation project(':@react-native-community_async-storage')
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
    implementation 'com.facebook.react:react-native:+'
    implementation 'com.facebook.fresco:fresco:1.5.0'
    implementation 'com.facebook.fresco:animated-gif:1.5.0'
    implementation files('libs/libddshare.jar')
    implementation files('libs/open_sdk_r5990_lite.jar')
    implementation files('libs/umeng-share-core-6.9.3.jar')
    implementation files('libs/umeng-share-Ding-6.9.3.jar')
    implementation files('libs/umeng-share-QQ-full-6.9.3.jar')
    implementation files('libs/umeng-share-wechat-full-6.9.3.jar')
    implementation files('libs/umeng-sharetool-6.9.3.jar')
    implementation files('libs/wechat-sdk-android-without-mta-5.1.4.jar')
    implementation files('libs/utdid4all-1.1.5.3_proguard.jar')
    api project(':push')
    implementation 'com.umeng.umsdk:huawei-basetb:2.6.3.305'
    implementation 'com.umeng.umsdk:huawei-pushtb:2.6.3.305'
    implementation 'com.umeng.umsdk:huawei-umengaccs:1.2.1'
    implementation files('libs/umeng-common-2.1.0.jar')
    implementation 'com.alibaba:fastjson:1.1.67.android'
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
